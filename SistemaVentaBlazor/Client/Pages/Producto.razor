@page "/page/producto"

@inject IDialogService _dialogServicio
@inject ISnackbar _snackBar
@inject IProductoService _productoServicio


<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">
    <MudText Typo="Typo.h5" GutterBottom="true">Productos</MudText>

    <MudPaper Elevation="3" Class="pa-4" Width="100%">
        <MudGrid>
            <MudItem xs="12" Class="d-flex gap-3">
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Add"
                           Color="Color.Primary"
                           OnClick="AbrirNuevoProducto">
                    Nuevo Producto
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.UploadFile"
                           Color="Color.Secondary"
                           OnClick="AbrirModalCargaMasiva">
                    Carga Masiva de Productos
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                <MudTable Items="@listaProductos"
                          Striped="true" Bordered="true" Dense="true"
                          Filter="new Func<ProductoDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
                          Loading="@_loading" LoadingProgressColor="Color.Info">
                    <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Categoria</MudTh>
                        <MudTh>Stock</MudTh>
                        <MudTh>Precio</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="productoRow">
                        <MudTd DataLabel="Nombre">@productoRow.Nombre</MudTd>
                        <MudTd DataLabel="Categoria">@productoRow.DescripcionCategoria</MudTd>
                        <MudTd DataLabel="Stock">@productoRow.Stock</MudTd>
                        <MudTd DataLabel="Precio">@productoRow.Precio</MudTd>
                        <MudTd DataLabel="">
                            <MudFab Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.Edit"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => AbrirEditarProducto(productoRow))" />
                            <MudFab Color="Color.Error"
                                    StartIcon="@Icons.Material.Filled.Delete"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => EliminarProducto(productoRow))" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<ProductoDTO> listaProductos = new();
    private string searchString1 = "";
    private ProductoDTO selectedItem1 = null;
    private bool _loading = true;

    private async Task ObtenerProductos()
    {
        var result = await _productoServicio.Lista();
        if (result.status)
        {
            listaProductos = (List<ProductoDTO>)result.value!;
        }
        _loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerProductos();
    }

    private bool FilterFunc1(ProductoDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(ProductoDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return element.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || element.DescripcionCategoria.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task AbrirNuevoProducto()
    {
        var dialogo = _dialogServicio.Show<MdProducto>("Nuevo Producto");
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerProductos();
        }
    }

    private async Task AbrirEditarProducto(ProductoDTO model)
    {
        var parametros = new DialogParameters { ["_producto"] = model };
        var dialogo = _dialogServicio.Show<MdProducto>("Editar Producto", parametros);
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerProductos();
        }
    }

    private async Task EliminarProducto(ProductoDTO model)
    {
        bool confirmar = await ConfirmarEliminacion(model.Nombre);
        if (confirmar)
        {
            var resultado = await _productoServicio.Eliminar(model.IdProducto);
            if (resultado)
            {
                _snackBar.Add("El producto fue eliminado", Severity.Success);
                await ObtenerProductos();
            }
            else
            {
                _snackBar.Add("No se pudo eliminar", Severity.Error);
            }
        }
    }

    private async Task<bool> ConfirmarEliminacion(string nombre)
    {
        var result = await _dialogServicio.ShowMessageBox(
            "¿Está seguro?",
            $"Eliminar producto: {nombre}",
            yesText: "Sí, eliminar",
            noText: "No, volver"
        );
        return result == true;
    }

    private async Task AbrirModalCargaMasiva()
    {
        var dialogo = _dialogServicio.Show<MdCargaMasiva>("Carga Masiva de Productos");
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerProductos(); // Actualiza la lista de productos después de cargar el archivo
        }
    }
}

